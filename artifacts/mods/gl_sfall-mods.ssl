/*

   Sfall game play mods

   NOTE: this script requires compiler from sfall modderspack with -s option
   (short circuit evaluation)

   version 1.0

*/

#define SFALL_SC_EVALUATION   (true) // ScriptEditor 4.0: Automatic script compilation with -s option

#include "..\headers\define.h"
#include "..\headers\command.h"
#include "main.h"

#define  DUDE_INVEN           read_int(0x519058)

procedure start;

procedure InventoryMoveHandler;
procedure KeyPressHandler;

procedure pickup_ground_items;
procedure pickup_clear();
procedure distance_sort(variable array);
procedure weapon_drop;
procedure DeathAmimHandler;
procedure GameModeHandler;
procedure UseSkillOnHandler;

variable quickAmmoReload, pickupKey, keyMod, hideIfaceKey;
variable pickupItem, temp, pickupMessage, hideIface := false;
variable deathNpcArray, countDeath;

procedure start begin
   variable sfall_version;

   if game_loaded then begin
      sfall_version := (100 * sfall_ver_major) + (10 * sfall_ver_minor) + sfall_ver_build;
      //isUnsafe := GetIniConfig("Debugging", "AllowUnsafeScripting", 0, "ddraw.ini");

      register_hook_proc(HOOK_KEYPRESS, KeyPressHandler);
      register_hook_proc(HOOK_INVENTORYMOVE, InventoryMoveHandler);

      if (sfall_version >= 414) then begin
         pickupKey := GetConfig("Inventory", "PickupItemKey", 0);
         if (pickupKey > 0) then pickupMessage := GetConfigStr("Inventory", "PickupItemMsg", "Error");

         if ((GetConfig("Inventory", "QuickAmmoReload", 0) > 0)
         and GetIniConfig("Misc", "ReloadReserve", -1, "ddraw.ini") > -1) then begin
            quickAmmoReload := true;
         end
      end
      if (GetConfig("Inventory", "DropItemsOnDeath", 0)) then begin
         register_hook_proc(HOOK_DEATHANIM2, DeathAmimHandler);
         deathNpcArray := create_array_list(8);
      end
      keyMod := GetConfig("Misc", "CombatKeyMod", 0);

      if (GetConfig("PartyMember", "UsePartySkills", 0)) then begin
         register_hook_proc(HOOK_USESKILLON, UseSkillOnHandler);
      end

      if (GetIniConfig("IFACE", "IFACE_BAR_MODE", 0, "f2_res.ini") == 1) then begin
         hideIfaceKey := GetConfig("Misc", "HideInterfaceKey", 0);
         if (hideIfaceKey) then register_hook_proc(HOOK_GAMEMODECHANGE, GameModeHandler);
      end

      // Fix the lighting of the map from the night vision perk when loading the game
      if has_trait(TRAIT_PERK, dude_obj, PERK_night_vision) then begin
         temp := get_light_level;
         if (temp > 65535) then return; // 100%
         if (temp < 40960) then begin
            temp := round(((temp - 16384) * 100) / 24576.0);
         end
         else if (temp > 40960) then begin
            temp := round(((temp - 40960) * 100) / 24576.0);
         end else temp := 50;
         set_light_level(temp); // refresh lighting
      end
   end
end

procedure InventoryMoveHandler begin
/*
   int     arg1 - Target slot (0 - main backpack, 1 - left hand, 2 - right hand, 3 - armor slot, 4 - weapon, when reloading it by dropping ammo, 5 - container, like bag/backpack, 6 - dropping on the ground)
   Item    arg2 - Item being moved
   Item    arg3 - Item being replaced, weapon being reloaded, or container being filled (can be 0)

   int     ret1 - Override setting (-1 - use engine handler, any other value - prevent relocation of item/reloading weapon)
*/
   variable event := get_sfall_arg,
            itemDrop := get_sfall_arg,
            itemWeapon := get_sfall_arg,
            cAmmo, ammoPid, ammoObj, inven;

   if (event == 4) then begin
      if (quickAmmoReload) then return;
      cAmmo := get_weapon_ammo_count(itemWeapon);
      if (cAmmo == 0) then return;

      ammoPid := get_weapon_ammo_pid(itemWeapon);
      if (obj_pid(itemDrop) == ammoPid) then return;

      inven := DUDE_INVEN;
      if (obj_is_carrying_obj(inven, itemWeapon) > 1) then return;

      // force unload
      set_weapon_ammo_count(itemWeapon, 0);
      // add ammo to inventory
      ammoObj := create_object(ammoPid, 0, 0);
      set_weapon_ammo_count(ammoObj, cAmmo);
      add_obj_to_inven(inven, ammoObj);
   end
   else if (event == 7) then begin
       if (pickupItem and pickupItem == itemDrop) then begin
          display_msg(sprintf(pickupMessage, obj_name(itemDrop)));
       end
       pickupItem := 0;
   end
   else if (event == 8) then begin
      if (obj_item_subtype(itemDrop) == item_type_drug) then begin
         set_self(dude_obj);
         set_self(dude_obj);
         use_obj_on_obj(itemDrop, dude_obj);
      end
      else begin
         display_msg(mstr_item(10));
      end
   end
end

procedure KeyPressHandler begin
/*
   int     arg1 - event type: 1 - pressed, 0 - released
   int     arg2 - key DX scancode
   int     arg3 - key VK code (very similar to ASCII codes)

   int     ret1 - overrides the pressed key (a new key DX scancode or 0 for no override)
*/
   variable pressed := get_sfall_arg,
            keyDX   := get_sfall_arg,
            mode    := get_game_mode;

   if (keyDX == hideIfaceKey and (mode == 0 or mode == (COMBAT + PCOMBAT))) then begin
      if (pressed) then begin
         intface_hide;
         hideIface := true;
      end
      else if (hideIface) then begin
         intface_show;
         hideIface := false;
      end
      return;
   end
   if (pressed) then begin
      if (mode bwand (COUNTERWIN)) then return;
      // Close inventory when re-pressing the 'I' key
      if (keyDX == DIK_I and (mode bwand INVENTORY)) then begin
         tap_key(DIK_ESCAPE);
      end
      else if (keyDX == DIK_S and (mode bwand SKILLDEX)) then begin
         tap_key(DIK_ESCAPE);
      end
      else if (keyDX == DIK_Z and (mode bwand PIPBOY)) then begin
         tap_key(DIK_ESCAPE);
      end
      if ((mode bwand BARTER) and (keyDX == DIK_SPACE or keyDX == DIK_RETURN)) then begin
         play_sfx("IB2P1XX1");
         tap_key(DIK_M);
      end
      else if (keyDX == pickupKey and (mode == 0)) then begin
         call pickup_ground_items;
      end
      else if (keyMod and (mode == (PCOMBAT + COMBAT))) then begin
         if (keyDX == DIK_A) then begin
            if get_cursor_mode != CURSOR_TARGETING then
               set_cursor_mode(CURSOR_TARGETING);
            else
               set_cursor_mode(CURSOR_MOVEMENT);
         end
         else if (keyDX == DIK_E) then tap_key(DIK_RETURN);
      end
   end
end

procedure pickup_ground_items begin
   variable item, itemPid, weight, dist, walkDist,
            itemsArray := distance_sort(list_as_array(LIST_GROUNDITEMS));

   foreach (dist: item in itemsArray) begin
      if (dist > 1) then begin
         if (obj_blocking_line(item, dude_tile, BLOCKING_TYPE_SIGHT)) then continue;
         walkDist := len_array(path_find_to(item, dude_tile, BLOCKING_TYPE_BLOCK));
         if (walkDist == 0 or walkDist > 6) then continue;
      end
      itemPid := obj_pid(item);
      if (itemPid != PID_ACTIVE_DYNAMITE and itemPid != PID_ACTIVE_PLASTIC_EXPLOSIVE) then begin
         weight := item_weight(item);
         if (weight + who_carry_amount(dude_obj) > get_critter_stat(dude_obj, STAT_carry_amt)) then begin
            weight := -1;
            continue; // next item
         end
         weight := 0;

         // pickup object
         set_self(dude_obj);
         pickupItem := item;
         pickup_obj(item);
         //walkDist /= 2;
         call pickup_clear in 3;
         break; // exit loop
      end
   end
   if weight == -1 then display_msg(mstr_misc(8000)); // You carry too much
end

procedure pickup_clear() begin
   pickupItem := 0;
end

procedure distance_sort(variable array) begin
   variable dist, item,
            sortArray := create_array(-1, 2);

   foreach (item in array) begin
       dist := tile_distance_objs(item, dude_obj);
       if (dist > 3 or obj_item_subtype(item) == item_type_container) then continue;
       sortArray[dist] := item;
   end
   sort_array(sortArray);
   return sortArray;
end

procedure weapon_drop begin
   variable deathNpc, dropped_hex, weapon, elev, i;

   while (i < countDeath) do begin
      deathNpc := deathNpcArray[i];
      i++;
      if (get_proto_data(obj_pid(deathNpc), PROTO_CR_FLAGS) bwand CFLG_NODROP) then return;
      elev := elevation(deathNpc);

      weapon := critter_inven_obj(deathNpc, INVEN_TYPE_RIGHT_HAND);
      if (weapon) then begin
         set_flags(weapon, get_flags(weapon) bwand bwnot(FLAG_RIGHT_HAND));
         rm_obj_from_inven(deathNpc, weapon);
         dropped_hex := tile_num_in_direction(tile_num(deathNpc), random(0, 5), 1);
         if (obj_blocking_tile(dropped_hex, elev, BLOCKING_TYPE_BLOCK) != 0) then begin
            dropped_hex := tile_num(deathNpc);
         end
         move_to(weapon, dropped_hex, elev);
      end

      weapon := critter_inven_obj(deathNpc, INVEN_TYPE_LEFT_HAND);
      if (weapon) then begin
         set_flags(weapon, get_flags(weapon) bwand bwnot(FLAG_LEFT_HAND));
         rm_obj_from_inven(deathNpc, weapon);
         dropped_hex := tile_num_in_direction(tile_num(deathNpc), random(0, 5), 1);
         if (obj_blocking_tile(dropped_hex, elev, BLOCKING_TYPE_BLOCK) != 0) then begin
            dropped_hex := tile_num(deathNpc);
         end
         move_to(weapon, dropped_hex, elev);
      end
   end
   countDeath := 0;
end

procedure DeathAmimHandler begin
   variable args := get_sfall_args;
   if (args[2] != real_dude_obj) then begin
      deathNpcArray[countDeath] := args[2];
      countDeath++;
      if (countDeath == 1) then call weapon_drop in 1; // delay event
   end
end

procedure GameModeHandler begin
   if (hideIface == false or get_sfall_arg) then return;
   if (intface_is_hidden) then begin
      intface_show;
      hideIface := false;
   end
end

procedure UseSkillOnHandler begin
   variable object, member, skill, dudeSkill, memberSkill, memberUse, useOnSelf, medicSkill, allow;

   if (party_member_count(DONT_LIST_HIDDEN_MEMBERS) == 0 or get_sfall_arg != dude_obj) then return;

   object := get_sfall_arg;
   skill  := get_sfall_arg;

   useOnSelf  := (object == dude_obj);
   medicSkill := (skill == SKILL_DOCTOR or skill == SKILL_FIRST_AID);

   if (useOnSelf and medicSkill == false) then return; // exit, when using skills on himself (except for the skill of the doctor and first aid)
   if (medicSkill and obj_type(object) != OBJ_TYPE_CRITTER) then return;

   if (skill != SKILL_LOCKPICK and skill != SKILL_TRAPS and skill != SKILL_SCIENCE and skill != SKILL_REPAIR and medicSkill == false) then return;
   if ((skill == SKILL_LOCKPICK or skill == SKILL_TRAPS) and obj_type(object) == OBJ_TYPE_CRITTER) then return;

   dudeSkill := critter_skill_level(dude_obj, skill);

   foreach (member in party_member_list_critters) begin
      if (member != dude_obj and proto_data(obj_pid(member), cr_body_type) == CR_BODY_BIPED) then begin
         memberSkill := critter_skill_level(member, skill);
         if (memberSkill > dudeSkill and tile_distance_objs(dude_obj, member) <= 10) then begin
            memberUse := member;
            dudeSkill := memberSkill;
         end
      end
   end
   if (memberUse and
      (memberUse != object or medicSkill)) then
   begin
      if (useOnSelf) then begin // the skill of the medic is applied to itself
         allow := (tile_distance_objs(memberUse, object) < 3); // allow a party member to apply the skill to a player if it is located nearby
      end
      else begin
         allow := (tile_distance_objs(dude_obj, object) > 2); // allow the party member to apply the skill to an object if the player is not located near the object
      end
      if (allow) then begin
         float_msg(memberUse, message_str_game(GAME_MSG_SKILL, random(1000, 1005)), FLOAT_MSG_NORMAL);
         set_sfall_arg(0, memberUse);
         set_sfall_return(memberUse);
         return;
      end
      else if ((medicSkill or random(0, 10) == 0) and anim_busy(memberUse) == false) then begin
         float_msg(memberUse, message_str_game(GAME_MSG_SKILL, random(1100, 1104)), FLOAT_MSG_NORMAL);
      end
   end
   set_sfall_return(dude_obj); // for disable engine behavior
end