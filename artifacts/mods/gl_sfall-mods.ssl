/*

   Sfall game play mods

   NOTE: this script requires compiler from sfall modderspack with -s option
   (short circuit evaluation)

   version 1.0

*/

#define SFALL_SC_EVALUATION   (true) // ScriptEditor 4.0: Automatic script compilation with -s option

#include "..\headers\define.h"
#include "..\headers\command.h"
#include "main.h"

#define  DUDE_INVEN           read_int(0x519058)

procedure start;

procedure InventoryMoveHandler;
procedure KeyPressHandler;

procedure pickup_ground_items;
procedure pickup_info();
procedure distance_sort(variable array);

variable pickupKey, pickupItem, temp;

procedure start begin
   variable sfall_version;

   if game_loaded then begin
      sfall_version := (100 * sfall_ver_major) + (10 * sfall_ver_minor) + sfall_ver_build;
      //isUnsafe := GetIniConfig("Debugging", "AllowUnsafeScripting", 0, "ddraw.ini");

      register_hook_proc(HOOK_KEYPRESS, KeyPressHandler);

      if (sfall_version >= 414) then begin
         pickupKey := GetConfig("Inventory", "PickupItemKey", 0);

         if ((GetConfig("Inventory", "QuickAmmoReload", 0) > 0)
         and GetIniConfig("Misc", "ReloadReserve", -1, "ddraw.ini") > -1) then begin
            register_hook_proc(HOOK_INVENTORYMOVE, InventoryMoveHandler);
         end
      end

      // Fix the lighting of the map from the night vision perk when loading the game
      if has_trait(TRAIT_PERK, dude_obj, PERK_night_vision) then begin
         temp := get_light_level;
         if (temp > 65535) then return; // 100%
         if (temp < 40960) then begin
            temp := round(((temp - 16384) * 100) / 24576.0);
         end
         else if (temp > 40960) then begin
            temp := round(((temp - 40960) * 100) / 24576.0);
         end else temp := 50;
         set_light_level(temp); // refresh lighting
      end
   end
end

procedure InventoryMoveHandler begin
/*
   int     arg1 - Target slot (0 - main backpack, 1 - left hand, 2 - right hand, 3 - armor slot, 4 - weapon, when reloading it by dropping ammo, 5 - container, like bag/backpack, 6 - dropping on the ground)
   Item    arg2 - Item being moved
   Item    arg3 - Item being replaced, weapon being reloaded, or container being filled (can be 0)

   int     ret1 - Override setting (-1 - use engine handler, any other value - prevent relocation of item/reloading weapon)
*/
   variable event := get_sfall_arg,
            itemAmmo := get_sfall_arg,
            itemWeapon := get_sfall_arg,
            cAmmo, ammoPid, ammoObj, inven;

   if (event == 4) then begin
      cAmmo := get_weapon_ammo_count(itemWeapon);
      if (cAmmo == 0) then return;

      ammoPid := get_weapon_ammo_pid(itemWeapon);
      if (obj_pid(itemAmmo) == ammoPid) then return;

      inven := DUDE_INVEN;
      if (obj_is_carrying_obj(inven, itemWeapon) > 1) then return;

      // force unload
      set_weapon_ammo_count(itemWeapon, 0);
      // add ammo to inventory
      ammoObj := create_object(ammoPid, 0, 0);
      set_weapon_ammo_count(ammoObj, cAmmo);
      add_obj_to_inven(inven, ammoObj);
   end
end

procedure KeyPressHandler begin
/*
   int     arg1 - event type: 1 - pressed, 0 - released
   int     arg2 - key DX scancode
   int     arg3 - key VK code (very similar to ASCII codes)

   int     ret1 - overrides the pressed key (a new key DX scancode or 0 for no override)
*/
   variable pressed := get_sfall_arg,
            keyDX   := get_sfall_arg;

   if (pressed) then begin
       // Close inventory when re-pressing the 'I' key
      if (keyDX == DIK_I and (get_game_mode bwand INVENTORY)) then begin
         tap_key(DIK_ESCAPE);
      end
      else if (keyDX == DIK_S and (get_game_mode bwand SKILLDEX)) then begin
         tap_key(DIK_ESCAPE);
      end
      else if (keyDX == DIK_Z and (get_game_mode bwand PIPBOY)) then begin
         tap_key(DIK_ESCAPE);
      end
      else if (keyDX == DIK_A and combat_is_initialized) then begin
         if get_cursor_mode != CURSOR_TARGETING then
            set_cursor_mode(CURSOR_TARGETING);
         else
            set_cursor_mode(CURSOR_MOVEMENT);
      end
      else if (not(pickupItem) and keyDX == pickupKey and (get_game_mode == 0)) then begin
         call pickup_ground_items;
      end
   end
end

procedure pickup_ground_items begin
   variable item, itemPid, weight, dist, walkDist,
            itemsArray := distance_sort(list_as_array(LIST_GROUNDITEMS));

   foreach (dist: item in itemsArray) begin
      if (dist > 1) then begin
         if (obj_blocking_line(item, dude_tile, BLOCKING_TYPE_SIGHT)) then continue;
         walkDist := len_array(path_find_to(item, dude_tile, BLOCKING_TYPE_BLOCK));
         if (walkDist == 0 or walkDist > 6) then continue;
      end
      itemPid := obj_pid(item);
      if (itemPid != PID_ACTIVE_DYNAMITE and itemPid != PID_ACTIVE_PLASTIC_EXPLOSIVE) then begin
         weight := item_weight(item);
         if (weight + who_carry_amount(dude_obj) > get_critter_stat(dude_obj, STAT_carry_amt)) then begin
            weight := -1;
            continue; // next item
         end
         weight := 0;

         // pickup object
         set_self(dude_obj);
         pickup_obj(item);
         pickupItem := item;
         walkDist /= 2;
         call pickup_info in walkDist;
         break; // exit loop
      end
   end
   if weight == -1 then display_msg(mstr_misc(8000)); // You carry too much
end

procedure pickup_info() begin
   display_msg(sprintf(mstr_misc(8002), obj_name(pickupItem)));
   pickupItem := 0;
end

procedure distance_sort(variable array) begin
   variable dist, item,
            sortArray := create_array(-1, 2);

   foreach (item in array) begin
       dist := tile_distance_objs(item, dude_obj);
       if (dist > 3 or obj_item_subtype(item) == item_type_container) then continue;
       sortArray[dist] := item;
   end
   sort_array(sortArray);
   return sortArray;
end